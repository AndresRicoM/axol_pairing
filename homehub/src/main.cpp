/*

   █████╗ ██╗  ██╗ ██████╗ ██╗
  ██╔══██╗╚██╗██╔╝██╔═══██╗██║
  ███████║ ╚███╔╝ ██║   ██║██║
  ██╔══██║ ██╔██╗ ██║   ██║██║
  ██║  ██║██╔╝ ██╗╚██████╔╝███████╗
  ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝ ╚══════╝

  ᓬ(• - •)ᕒ
<<<<<<< HEAD
<<<<<<< HEAD

=======
           XDDDD
>>>>>>> 5c32671 (fix function constructors and dependencies)
=======
>>>>>>> 9cd72c5 (Solving conflicts)
  Axol sensing system.

   Code for Homehub Firmware. HomeHub connects to a mesh of sensors and serves as a relay for data coming to and from the sensor system.
   The device has a built in OLED screen for data visualization.

   Andres Rico - aricom@mit.edu

 */
#include <Arduino.h>
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 5f1ef29 (Integrate captive portal)
#include <WiFiManager.h>
#include <strings_en.h>
#include <wm_consts_en.h>
#include <wm_strings_en.h>
#include <wm_strings_es.h>
<<<<<<< HEAD
=======

>>>>>>> 5c32671 (fix function constructors and dependencies)
=======
>>>>>>> 5f1ef29 (Integrate captive portal)

#include <WiFi.h>
#include <Wire.h>
#include <SPI.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>
#include <esp_now.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include "time.h"

#include <esp_wifi.h>
#include <Preferences.h>

/* FUNCTION HEADERS */
int get_buttons();
void get_time();
void drawCS();
void draw_axol();
void draw_weather_icon(const unsigned char icon[], int width, int height);
void draw_waterdash();
void draw_system();
void draw_receiveddata();
void draw_maindash();
void draw_clockdash();
void get_complete_weather();
void OnDataRecv(const uint8_t *mac, const uint8_t *incomingData, int len);
void server_send();
void get_complete_weather();
void get_system_stats();
void connect_send(String php_command);

<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 5f1ef29 (Integrate captive portal)
/* HEADERS FOR 2.0v */
void bindServerCallback();
void handleSetupRoute();
void handleRegister();
void handleRegisterRequest();
bool establishWiFiConnection();
void printNetworkInfo();
void onDemandPortal();
String retrievePublicIPAddress();
String postData(String endpoint, String requestBody);
JsonDocument retrieveLocation();

<<<<<<< HEAD
=======
>>>>>>> 5c32671 (fix function constructors and dependencies)
=======
>>>>>>> 5f1ef29 (Integrate captive portal)
// Screen Variables
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define LOGO_HEIGHT 60 // CS logo Size in pixels
#define LOGO_WIDTH 60

#define WWIDTH 21 // Water Drop Size in pixels
#define WHEIGHT 30

<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 5f1ef29 (Integrate captive portal)
/* GLOBAL VARIABLES FOR 2.0v*/
WiFiManager wm;
Preferences preferences;

// Latitude & Longitude
// String lat;
// String lon;

double lat, lon;
<<<<<<< HEAD
=======
float lat, lon;
>>>>>>> 5f1ef29 (Integrate captive portal)
=======
>>>>>>> 9cd72c5 (Solving conflicts)

// CAPTIVE-PORTAL FUNCTIONS
void bindServerCallback()
{
  wm.server->on("/", handleSetupRoute);
  /* To-do: check if user is registered */

  // leer la bandera de eeprom
  // -- Si tiene bandera: muestras /register
  // -- Si no, pues se pone otra que falta: /login
  wm.server->on("/register", handleRegister);
  wm.server->on("/api/register", handleRegisterRequest);
}

String postData(String endpoint, String requestBody)
{
  HTTPClient http;
  http.begin(endpoint);
  http.addHeader("Content-Type", "application/x-www-form-urlencoded");
  int httpResponseCode = http.POST(requestBody);
  String response = "default string";
  String error;

  Serial.print("Endpoint: ");
  Serial.println(endpoint);

  if (httpResponseCode > 0)
  {
    response = http.getString();
  }
  else
  {
    error = "Error occurred while sending HTTP POST: " + String(http.errorToString(httpResponseCode));
    Serial.println(error);
    return error;
  }

  http.end();
  return response;
}

String retrievePublicIPAddress()
{
  String endpoint = "https://api.ipify.org/";
  HTTPClient http;
  String response;

  http.begin(endpoint);
  http.addHeader("Content-Type", "application/x-www-form-urlencoded");
  int responseCode = http.GET();

  Serial.println("response code");
  Serial.println(responseCode);

  response = http.getString();

  return response;
}

JsonDocument retrieveLocation()
{
  StaticJsonDocument<200> doc1;
  JsonDocument json;

  doc1["homeMobileCountryCode"] = "334";
  doc1["homeMobileNetworkCode"] = "020";
  doc1["radioType"] = "lte";
  doc1["carrier"] = "Telcel";
  doc1["considerIp"] = "true";

  String requestBody;
  serializeJson(doc1, requestBody);
  String publicIP = retrievePublicIPAddress();
  String endpoint = "http://ip-api.com/json/" + publicIP + "?fields=status,message,lat,lon,query";

  String response = postData(endpoint, requestBody);
  Serial.println("response");
  Serial.println(response);

  deserializeJson(json, response);

  return json;
}

<<<<<<< HEAD
void handleRegisterRequest()
{
  // Variables para almacenar datos enviados por el formulario
  String username = wm.server->arg("username");
  String homehubName = wm.server->arg("homehub_name");

  // Obtener la dirección MAC del ESP32
  String macAddr = WiFi.macAddress();

  // Crear cuerpo JSON para la solicitud POST
  StaticJsonDocument<256> jsonDoc;

  jsonDoc["macAddr"] = macAddr;
  jsonDoc["latitude"] = lat;
  jsonDoc["longitude"] = lon;
  jsonDoc["username"] = username;
  jsonDoc["name"] = homehubName;

  // Serializar JSON
  String jsonBody;
  serializeJson(jsonDoc, jsonBody);

  // Realizar solicitud POST

  HTTPClient http;
  http.begin("http://192.168.100.14:3000/homehub"); // Dirección de la API
  http.addHeader("Content-Type", "application/json");

  int httpResponseCode = http.POST(jsonBody);

  // Procesar respuesta
  if (httpResponseCode > 0)
  {
    String response = http.getString();
    Serial.println("Respuesta de la API: " + response);
    display.print(response);
  }
  else
  {
    Serial.println("Error en la solicitud: " + String(httpResponseCode));
    String errorMessage = http.errorToString(httpResponseCode);
    Serial.println("Detalle del error: " + errorMessage);
  }

  http.end();

  // Responder al cliente web
  wm.server->send(200, "text/plain", "Datos enviados correctamente");
}
<<<<<<< HEAD
=======
/*
 * API routes for handling requests
 */
void handleRegisterRequest()
{
  // Getting query variables from the request.
  String homehubName = wm.server->arg("homehub_name");
  String homehubOwner = wm.server->arg("homehub_owner");
  String endpoint = "http://192.168.1.64/axol/homehub.php";

  String data = "type=5"
                "&hh_name=" +
                homehubName + "&hh_owner=" + homehubOwner + "&mac_address=" + WiFi.macAddress() + "&lat=" + lat + "&lon=" + lon;

  // String data;
  // serializeJson(doc, data);

  String response = postData(endpoint, data);
  Serial.println(response);

  String page = HTTP_HEAD_START + String(HTTP_STYLE) + "</head>" + "<body>" + "<h1>Register HomeHub</h1>" + "<h2>" + response + "</h2>" + "<p> Restarting... </p>" + HTTP_END;

  wm.server->send(200, "text/html", page);
  delay(2000);
  ESP.restart();
}

>>>>>>> 5f1ef29 (Integrate captive portal)
=======
>>>>>>> 9cd72c5 (Solving conflicts)
/*
 * Captive Portal routes for pages
 */
void handleSetupRoute()
{
  String page = HTTP_HEAD_START + String(HTTP_STYLE) + "</head>" + "<body>" + "<h1>Axol HomeHub Configuration</h1>" + "<form action='/wifi' method='get'><button type='submit'>Configure WiFi</button></form><br/>" + "<form action='/register' method='get'><button type='submit'>Register</button></form><br/>" + "<form action='/info' method='get'><button type='submit'>Info</button></form><br/>" + "<form action='/exit' method='get'><button type='submit'>Exit</button></form><br/>" + HTTP_END;
  wm.server->send(200, "text/html", page);
}

void handleRegister()
{

  JsonDocument location = retrieveLocation();
<<<<<<< HEAD
<<<<<<< HEAD
  lat = location["lat"];
  lon = location["lon"];
=======
  float locLatitude = location["location"]["lat"];
  float locLongitude = location["location"]["lng"];

  // lat = String(locLatitude, 6);
  // lon = String(locLongitude, 6);

  lat = locLatitude;
  lon = locLongitude;
>>>>>>> 5f1ef29 (Integrate captive portal)
=======
  lat = location["lat"];
  lon = location["lon"];
>>>>>>> 9cd72c5 (Solving conflicts)

  String page = HTTP_HEAD_START + String(HTTP_STYLE) + "<style>"

                + "input{" + "   border: 1px #C1BDBD solid;" + "   line-height: 2em;" + "}" + ".textbox{" + "   display: flex;" + "   flex-direction: column;" + "   align-items: flex-start;" + "   gap: 0.5rem;" + "}" + "form{" + "   gap: 1.5rem;" + "}"

                + "</style>" + "</head>" + "<body>" + "<h1>Register HomeHub</h1>" + "<form action='/api/register' method='post'>"

<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 9cd72c5 (Solving conflicts)
                + "<div class='textbox'>" + "   <span>Username</span>" + "   <input type='text' name='username' />" + "</div>"

                + "<div class='textbox'>" + "   <span>HomeHub Name</span>" + "   <input type='text' name='homehub_name' />" + "</div>"

                + "<button type='submit'>Register</button>" + "</form>" + HTTP_END;

<<<<<<< HEAD
=======
                + "<div class='textbox'>" + "   <span>Username</span>" + "   <input type='text' name='homehub_name' />" + "</div>"

                + "<div class='textbox'>" + "   <span>Password</span>" + "   <input type='password' name='homehub_owner' />" + "</div>" + "<button type='submit'>Register</button>" + "</form>" + HTTP_END;
>>>>>>> 5f1ef29 (Integrate captive portal)
=======
>>>>>>> 9cd72c5 (Solving conflicts)
  /* To-do: write to EEPROM */

  wm.server->send(200, "text/html", page);
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
// Función para procesar la solicitud del formulario y enviar datos

=======

void handleLogin()
{

  JsonDocument location = retrieveLocation();
  float locLatitude = location["location"]["lat"];
  float locLongitude = location["location"]["lng"];

  // lat = String(locLatitude, 6);
  // lon = String(locLongitude, 6);

  lat = locLatitude;
  lon = locLongitude;

  String page = HTTP_HEAD_START + String(HTTP_STYLE) + "<style>"

                + "input{" + "   border: 1px #C1BDBD solid;" + "   line-height: 2em;" + "}" + ".textbox{" + "   display: flex;" + "   flex-direction: column;" + "   align-items: flex-start;" + "   gap: 0.5rem;" + "}" + "form{" + "   gap: 1.5rem;" + "}"

                + "</style>" + "</head>" + "<body>" + "<h1>Register HomeHub</h1>" + "<form action='/api/login' method='post'>"

                + "<div class='textbox'>" + "   <span>Username</span>" + "   <input type='text' name='username' />" + "</div>"

                + "<div class='textbox'>" + "   <span>Password</span>" + "   <input type='text' name='password' />" + "</div>" + "<button type='submit'>Register</button>" + "</form>" + HTTP_END;
  /* To-do: write to EEPROM */

  wm.server->send(200, "text/html", page);
}
>>>>>>> 5f1ef29 (Integrate captive portal)
=======
// Función para procesar la solicitud del formulario y enviar datos

  // leer la bandera de eeprom
  // -- Si tiene bandera: muestras /register
  // -- Si no, pues se pone otra que falta: /login
  wm.server->on("/register", handleRegister);
  wm.server->on("/api/register", handleRegisterRequest);
}
>>>>>>> 9cd72c5 (Solving conflicts)
=======
>>>>>>> d28e8fd (Solving more conflicts)

void onDemandPortal()
{
  // Check connection...
  if (!establishWiFiConnection())
  {
    Serial.println("Not connected, opening Captive Portal...");
    return;
  }

  const int timeout = 300;
  wm.setConfigPortalTimeout(timeout);

  if (!wm.startConfigPortal("AxolOnDemand"))
  {
    Serial.println("Failed to connect");
  }

  Serial.println("onDemandPortal: Connected!");
}

bool establishWiFiConnection()
{
  return wm.autoConnect("Axol");
}

void printNetworkInfo()
{
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID()); // Nombre de la red WiFi

  Serial.print("Dirección IP: ");
  Serial.println(WiFi.localIP()); // Dirección IP del ESP32

  Serial.print("Intensidad de señal (RSSI): ");
  Serial.println(WiFi.RSSI()); // Intensidad de la señal en dBm

  Serial.print("Dirección MAC: ");
  Serial.println(WiFi.macAddress()); // Dirección MAC del ESP32

  Serial.print("Gateway: ");
  Serial.println(WiFi.gatewayIP()); // Dirección IP del gateway

  Serial.print("Máscara de Subred: ");
  Serial.println(WiFi.subnetMask()); // Máscara de subred

  Serial.print("DNS Primario: ");
  Serial.println(WiFi.dnsIP()); // Dirección IP del DNS primario

  Serial.print("MAC del router: ");
  Serial.println(WiFi.BSSIDstr());
}

// -----------------------------------------------------------------

<<<<<<< HEAD
=======
>>>>>>> 5c32671 (fix function constructors and dependencies)
=======
>>>>>>> 5f1ef29 (Integrate captive portal)
static const unsigned char PROGMEM cs_logo_bmp[] =
    {
        B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
        B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
        B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
        B00011111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11000000,
        B00011111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11000000,
        B00011111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11000000,
        B00011111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11000000,
        B00011111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11000000,
        B00011111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11000000,
        B00011111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11000000,
        B00011111, B11000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
        B00011111, B11000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
        B00011111, B11000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
        B00011111, B11000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
        B00011111, B11000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
        B00011111, B11000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
        B00011111, B11000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
        B00011111, B11000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
        B00011111, B11000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
        B00011111, B11000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11000000,
        B00011111, B11000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11000000,
        B00011111, B11000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11000000,
        B00011111, B11000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11000000,
        B00011111, B11000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11000000,
        B00011111, B11000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11000000,
        B00011111, B11000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11000000,
        B00011111, B11000000, B00111111, B11000000, B00000000, B00000000, B00000000, B00000000,
        B00011111, B11000000, B00111111, B11000000, B00000000, B00000000, B00000000, B00000000,
        B00011111, B11000000, B00111111, B11000000, B00000000, B00000000, B00000000, B00000000,
        B00011111, B11000000, B00111111, B11000000, B00000000, B00000000, B00000000, B00000000,
        B00011111, B11000000, B00111111, B11000000, B00000000, B00000000, B00000000, B00000000,
        B00011111, B11000000, B00111111, B11000000, B00000000, B00000000, B00000000, B00000000,
        B00011111, B11000000, B00111111, B11000000, B00000000, B00000000, B00000000, B00000000,
        B00011111, B11000000, B00111111, B11000000, B00000000, B00000000, B00000000, B00000000,
        B00011111, B11000000, B00111111, B11000000, B00000000, B00000000, B00000000, B00000000,
        B00011111, B11000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11000000,
        B00011111, B11000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11000000,
        B00011111, B11000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11000000,
        B00011111, B11000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11000000,
        B00011111, B11000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11000000,
        B00011111, B11000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11000000,
        B00011111, B11000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11000000,
        B00011111, B11000000, B00000000, B00000000, B00000000, B00000000, B00111111, B11000000,
        B00011111, B11000000, B00000000, B00000000, B00000000, B00000000, B00111111, B11000000,
        B00011111, B11000000, B00000000, B00000000, B00000000, B00000000, B00111111, B11000000,
        B00011111, B11000000, B00000000, B00000000, B00000000, B00000000, B00111111, B11000000,
        B00011111, B11000000, B00000000, B00000000, B00000000, B00000000, B00111111, B11000000,
        B00011111, B11000000, B00000000, B00000000, B00000000, B00000000, B00111111, B11000000,
        B00011111, B11000000, B00000000, B00000000, B00000000, B00000000, B00111111, B11000000,
        B00011111, B11000000, B00000000, B00000000, B00000000, B00000000, B00111111, B11000000,
        B00011111, B11111111, B11111111, B11000000, B00111111, B11111111, B11111111, B11000000,
        B00011111, B11111111, B11111111, B11000000, B00111111, B11111111, B11111111, B11000000,
        B00011111, B11111111, B11111111, B11000000, B00111111, B11111111, B11111111, B11000000,
        B00011111, B11111111, B11111111, B11000000, B00111111, B11111111, B11111111, B11000000,
        B00011111, B11111111, B11111111, B11000000, B00111111, B11111111, B11111111, B11000000,
        B00011111, B11111111, B11111111, B11000000, B00111111, B11111111, B11111111, B11000000,
        B00011111, B11111111, B11111111, B11000000, B00111111, B11111111, B11111111, B11000000,
        B00011111, B11111111, B11111111, B11000000, B00111111, B11111111, B11111111, B11000000,
        B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
        B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000};

const unsigned char happy_axol_bmp[] PROGMEM = {

    B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00001111, B11110000, B00000000, B00001111,
    B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00001111, B11110000, B00000000, B00001111,
    B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00001111, B11110000, B00000000, B00001111,
    B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00001111, B11110000, B00000000, B00001111,
    B00000000, B00000000, B11110000, B11110000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11110000, B11110000, B00000000, B00001111,
    B00000000, B00000000, B11110000, B11110000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11110000, B11110000, B00000000, B00001111,
    B00000000, B00000000, B11110000, B11110000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11110000, B11110000, B00000000, B00001111,
    B00000000, B00000000, B11110000, B11110000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11110000, B11110000, B00000000, B00001111,
    B00000000, B00000000, B00001111, B00001111, B00000000, B00000000, B00000000, B00000000, B00000000, B00001111, B00001111, B00000000, B00000000, B00001111,
    B00000000, B00000000, B00001111, B00001111, B00000000, B00000000, B00000000, B00000000, B00000000, B00001111, B00001111, B00000000, B00000000, B00001111,
    B00000000, B00000000, B00001111, B00001111, B00000000, B00000000, B00000000, B00000000, B00000000, B00001111, B00001111, B00000000, B00000000, B00001111,
    B00000000, B00000000, B00001111, B00001111, B00000000, B00000000, B00000000, B00000000, B00000000, B00001111, B00001111, B00000000, B00000000, B00001111,
    B00001111, B11110000, B00000000, B11111111, B00001111, B11111111, B11111111, B11111111, B11111111, B00001111, B11110000, B00000000, B11111111, B00001111,
    B00001111, B11110000, B00000000, B11111111, B00001111, B11111111, B11111111, B11111111, B11111111, B00001111, B11110000, B00000000, B11111111, B00001111,
    B00001111, B11110000, B00000000, B11111111, B00001111, B11111111, B11111111, B11111111, B11111111, B00001111, B11110000, B00000000, B11111111, B00001111,
    B00001111, B11110000, B00000000, B11111111, B00001111, B11111111, B11111111, B11111111, B11111111, B00001111, B11110000, B00000000, B11111111, B00001111,
    B00001111, B00001111, B00000000, B00001111, B11111111, B00000000, B00000000, B00000000, B00001111, B11111111, B00000000, B00001111, B00001111, B00001111,
    B00001111, B00001111, B00000000, B00001111, B11111111, B00000000, B00000000, B00000000, B00001111, B11111111, B00000000, B00001111, B00001111, B00001111,
    B00001111, B00001111, B00000000, B00001111, B11111111, B00000000, B00000000, B00000000, B00001111, B11111111, B00000000, B00001111, B00001111, B00001111,
    B00001111, B00001111, B00000000, B00001111, B11111111, B00000000, B00000000, B00000000, B00001111, B11111111, B00000000, B00001111, B00001111, B00001111,
    B00000000, B11110000, B11110000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00001111, B11110000, B11110000, B11110000, B00001111,
    B00000000, B11110000, B11110000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00001111, B11110000, B11110000, B11110000, B00001111,
    B00000000, B11110000, B11110000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00001111, B11110000, B11110000, B11110000, B00001111,
    B00000000, B11110000, B11110000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00001111, B11110000, B11110000, B11110000, B00001111,
    B00000000, B00001111, B11111111, B11110000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00001111,
    B00000000, B00001111, B11111111, B11110000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00001111,
    B00000000, B00001111, B11111111, B11110000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00001111,
    B00000000, B00001111, B11111111, B11110000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00001111,
    B11111111, B00000000, B00001111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00001111, B00000000, B00001111, B11111111,
    B11111111, B00000000, B00001111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00001111, B00000000, B00001111, B11111111,
    B11111111, B00000000, B00001111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00001111, B00000000, B00001111, B11111111,
    B11111111, B00000000, B00001111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00001111, B00000000, B00001111, B11111111,
    B11110000, B11110000, B11111111, B00000000, B00000000, B00001111, B00000000, B00001111, B00000000, B00000000, B00001111, B11110000, B11110000, B11111111,
    B11110000, B11110000, B11111111, B00000000, B00000000, B00001111, B00000000, B00001111, B00000000, B00000000, B00001111, B11110000, B11110000, B11111111,
    B11110000, B11110000, B11111111, B00000000, B00000000, B00001111, B00000000, B00001111, B00000000, B00000000, B00001111, B11110000, B11110000, B11111111,
    B11110000, B11110000, B11111111, B00000000, B00000000, B00001111, B00000000, B00001111, B00000000, B00000000, B00001111, B11110000, B11110000, B11111111,
    B00001111, B00001111, B11110000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00001111, B00001111,
    B00001111, B00001111, B11110000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00001111, B00001111,
    B00001111, B00001111, B11110000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00001111, B00001111,
    B00001111, B00001111, B11110000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00001111, B00001111,
    B00000000, B11111111, B11110000, B00000000, B00001111, B00000000, B00000000, B00000000, B00001111, B00000000, B00000000, B11111111, B11110000, B00001111,
    B00000000, B11111111, B11110000, B00000000, B00001111, B00000000, B00000000, B00000000, B00001111, B00000000, B00000000, B11111111, B11110000, B00001111,
    B00000000, B11111111, B11110000, B00000000, B00001111, B00000000, B00000000, B00000000, B00001111, B00000000, B00000000, B11111111, B11110000, B00001111,
    B00000000, B11111111, B11110000, B00000000, B00001111, B00000000, B00000000, B00000000, B00001111, B00000000, B00000000, B11111111, B11110000, B00001111,
    B00000000, B00000000, B11111111, B00000000, B00000000, B11110000, B00000000, B00000000, B11110000, B00000000, B00001111, B11110000, B00000000, B00001111,
    B00000000, B00000000, B11111111, B00000000, B00000000, B11110000, B00000000, B00000000, B11110000, B00000000, B00001111, B11110000, B00000000, B00001111,
    B00000000, B00000000, B11111111, B00000000, B00000000, B11110000, B00000000, B00000000, B11110000, B00000000, B00001111, B11110000, B00000000, B00001111,
    B00000000, B00000000, B11111111, B00000000, B00000000, B11110000, B00000000, B00000000, B11110000, B00000000, B00001111, B11110000, B00000000, B00001111,
    B00000000, B00000000, B00000000, B11110000, B00000000, B00001111, B11111111, B11111111, B00000000, B00000000, B11110000, B00000000, B00000000, B00001111,
    B00000000, B00000000, B00000000, B11110000, B00000000, B00001111, B11111111, B11111111, B00000000, B00000000, B11110000, B00000000, B00000000, B00001111,
    B00000000, B00000000, B00000000, B11110000, B00000000, B00001111, B11111111, B11111111, B00000000, B00000000, B11110000, B00000000, B00000000, B00001111,
    B00000000, B00000000, B00000000, B11110000, B00000000, B00001111, B11111111, B11111111, B00000000, B00000000, B11110000, B00000000, B00000000, B00001111,
    B00000000, B00000000, B00000000, B00001111, B00000000, B00000000, B00000000, B00000000, B00000000, B00001111, B00000000, B00000000, B00000000, B00001111,
    B00000000, B00000000, B00000000, B00001111, B00000000, B00000000, B00000000, B00000000, B00000000, B00001111, B00000000, B00000000, B00000000, B00001111,
    B00000000, B00000000, B00000000, B00001111, B00000000, B00000000, B00000000, B00000000, B00000000, B00001111, B00000000, B00000000, B00000000, B00001111,
    B00000000, B00000000, B00000000, B00001111, B00000000, B00000000, B00000000, B00000000, B00000000, B00001111, B00000000, B00000000, B00000000, B00001111,
    B00000000, B00000000, B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B11111111, B11110000, B00000000, B00000000, B00000000, B00001111,
    B00000000, B00000000, B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B11111111, B11110000, B00000000, B00000000, B00000000, B00001111,
    B00000000, B00000000, B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B11111111, B11110000, B00000000, B00000000, B00000000, B00001111,
    B00000000, B00000000, B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B11111111, B11110000, B00000000, B00000000, B00000000, B00001111

};

const unsigned char sad_axol_bmp[] PROGMEM = {
    B00000000, B00000000, B00000001, B11111111, B00000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11100000, B00000111, B11111100, B00000000, B00000000, B00000111,
    B00000000, B00000000, B00000001, B11111111, B00000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11100000, B00000111, B11111100, B00000000, B00000000, B00000111,
    B00000000, B00000000, B00000001, B11111111, B00000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11100000, B00000111, B11111100, B00000000, B00000000, B00000111,
    B00000000, B00000000, B00000001, B11111111, B00000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11100000, B00000111, B11111100, B00000000, B00000000, B00000111,
    B00000000, B00000000, B00000001, B11111111, B10000000, B01111111, B11111111, B11111111, B11111111, B11111111, B11110000, B00001111, B11111100, B00000000, B00000000, B00000111,
    B00000000, B00000000, B00011110, B00001111, B11111111, B11111100, B00000000, B00000000, B00000000, B00000001, B11111111, B11111111, B10000011, B11000000, B00000000, B00000111,
    B00000000, B00000000, B00011110, B00001111, B11111111, B11111100, B00000000, B00000000, B00000000, B00000001, B11111111, B11111111, B10000011, B11000000, B00000000, B00000111,
    B00000000, B00000000, B00011110, B00001111, B11111111, B11111100, B00000000, B00000000, B00000000, B00000001, B11111111, B11111111, B10000011, B11000000, B00000000, B00000111,
    B00000000, B00000000, B00011110, B00001111, B11111111, B11111100, B00000000, B00000000, B00000000, B00000001, B11111111, B11111111, B10000011, B11000000, B00000000, B00000111,
    B00000000, B00000011, B11100001, B11111111, B11111000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111100, B00111110, B00000000, B00000111,
    B00000000, B00000011, B11100001, B11111111, B11111000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111100, B00111110, B00000000, B00000111,
    B00000000, B00000011, B11100001, B11111111, B11111000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111100, B00111110, B00000000, B00000111,
    B00000000, B00000011, B11100001, B11111111, B11111000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111100, B00111110, B00000000, B00000111,
    B00000000, B00000011, B11100001, B11111111, B11111000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111100, B00111110, B00000000, B00000111,
    B00000000, B00000011, B11111111, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000111, B11111111, B11111110, B00000000, B00000111,
    B00000000, B00000011, B11111111, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000111, B11111111, B11111110, B00000000, B00000111,
    B00000000, B00000011, B11111111, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000111, B11111111, B11111110, B00000000, B00000111,
    B00000000, B00000011, B11111111, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000111, B11111111, B11111110, B00000000, B00000111,
    B00000000, B00000000, B00000001, B11110000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B01111100, B00000000, B00000000, B00000111,
    B00000000, B00000000, B00000001, B11110000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B01111100, B00000000, B00000000, B00000111,
    B00000000, B00000000, B00000001, B11110000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B01111100, B00000000, B00000000, B00000111,
    B00000000, B00000000, B00000001, B11110000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B01111100, B00000000, B00000000, B00000111,
    B00000000, B00000000, B00000001, B11110000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B01111100, B00000000, B00000000, B00000111,
    B00000000, B01111111, B11111111, B11110000, B00000000, B00000000, B00011111, B00000000, B00000111, B11000000, B00000000, B00000000, B01111111, B11111111, B11110000, B00000111,
    B00000000, B01111111, B11111111, B11110000, B00000000, B00000000, B00011111, B00000000, B00000111, B11000000, B00000000, B00000000, B01111111, B11111111, B11110000, B00000111,
    B00000000, B01111111, B11111111, B11110000, B00000000, B00000000, B00011111, B00000000, B00000111, B11000000, B00000000, B00000000, B01111111, B11111111, B11110000, B00000111,
    B00000000, B01111111, B11111111, B11110000, B00000000, B00000000, B00011111, B00000000, B00000111, B11000000, B00000000, B00000000, B01111111, B11111111, B11110000, B00000111,
    B00000000, B01111111, B11111111, B11110000, B00000000, B00000000, B00011110, B00000000, B00000011, B11000000, B00000000, B00000000, B01111111, B11111111, B11110000, B00000111,
    B00000111, B10000011, B11111110, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000011, B11111110, B00001111, B00000111,
    B00000111, B10000011, B11111110, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000011, B11111110, B00001111, B00000111,
    B00000111, B10000011, B11111110, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000011, B11111110, B00001111, B00000111,
    B00000111, B10000011, B11111110, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000011, B11111110, B00001111, B00000111,
    B11111000, B01111100, B00111110, B00000000, B00000000, B00000000, B00011111, B11111111, B11111111, B11000000, B00000000, B00000000, B00000011, B11100001, B11110000, B11111111,
    B11111000, B01111100, B00011110, B00000000, B00000000, B00000000, B00011111, B11111111, B11111111, B11000000, B00000000, B00000000, B00000011, B11000001, B11110000, B11111111,
    B11111000, B01111100, B00011110, B00000000, B00000000, B00000000, B00011111, B11111111, B11111111, B11000000, B00000000, B00000000, B00000011, B11000001, B11110000, B11111111,
    B11111000, B01111100, B00011110, B00000000, B00000000, B00000000, B00011111, B11111111, B11111111, B11000000, B00000000, B00000000, B00000011, B11000001, B11110000, B11111111,
    B11111000, B01111100, B00011110, B00000000, B00000000, B00000000, B00011111, B11111111, B11111111, B11000000, B00000000, B00000000, B00000011, B11000001, B11110000, B11111111,
    B11111111, B10000000, B00011111, B11110000, B00000000, B00000011, B11100000, B00000000, B00000000, B00111110, B00000000, B00000000, B01111111, B11000000, B00001111, B11111111,
    B11111111, B10000000, B00011111, B11110000, B00000000, B00000011, B11100000, B00000000, B00000000, B00111110, B00000000, B00000000, B01111111, B11000000, B00001111, B11111111,
    B11111111, B10000000, B00011111, B11110000, B00000000, B00000011, B11100000, B00000000, B00000000, B00111110, B00000000, B00000000, B01111111, B11000000, B00001111, B11111111,
    B11111111, B10000000, B00011111, B11110000, B00000000, B00000011, B11100000, B00000000, B00000000, B00111110, B00000000, B00000000, B01111111, B11000000, B00001111, B11111111,
    B11111111, B10000000, B00111111, B11110000, B00000000, B00000011, B11100000, B00000000, B00000000, B00111110, B00000000, B00000000, B01111111, B11100000, B00001111, B11111111,
    B00000000, B00000011, B11111110, B00001111, B00000000, B00111100, B00000000, B00000000, B00000000, B00000001, B11100000, B00000111, B10000011, B11111110, B00000000, B00000111,
    B00000000, B00000011, B11111110, B00001111, B00000000, B00111100, B00000000, B00000000, B00000000, B00000001, B11100000, B00000111, B10000011, B11111110, B00000000, B00000111,
    B00000000, B00000011, B11111110, B00001111, B00000000, B00111100, B00000000, B00000000, B00000000, B00000001, B11100000, B00000111, B10000011, B11111110, B00000000, B00000111,
    B00000000, B00000011, B11111110, B00001111, B00000000, B00111100, B00000000, B00000000, B00000000, B00000001, B11100000, B00000111, B10000011, B11111110, B00000000, B00000111,
    B00000000, B01111100, B00111110, B00000000, B11111000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111000, B00000011, B11100001, B11110000, B00000111,
    B00000000, B01111100, B00011110, B00000000, B11111000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111000, B00000011, B11000001, B11110000, B00000111,
    B00000000, B01111100, B00011110, B00000000, B11111000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111000, B00000011, B11000001, B11110000, B00000111,
    B00000000, B01111100, B00011110, B00000000, B11111000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111000, B00000011, B11000001, B11110000, B00000111,
    B00000000, B01111100, B00011110, B00000000, B01111000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11110000, B00000011, B11000001, B11110000, B00000111,
    B00000111, B10000011, B11100000, B00000000, B00000111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00111110, B00001111, B00000111,
    B00000111, B10000011, B11100000, B00000000, B00000111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00111110, B00001111, B00000111,
    B00000111, B10000011, B11100000, B00000000, B00000111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00111110, B00001111, B00000111,
    B00000111, B10000011, B11100000, B00000000, B00000111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00111110, B00001111, B00000111,
    B00000111, B11111100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B11111111, B00000111,
    B00000111, B11111100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B11111111, B00000111,
    B00000111, B11111100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B11111111, B00000111,
    B00000111, B11111100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B11111111, B00000111,
    B00000111, B11111100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B11111111, B00000111};

const unsigned char snow_bmp[] PROGMEM = {
    B11100000, B00011100, B11100000, B00011111,
    B11100000, B00011100, B11100000, B00011111,
    B11100000, B00011100, B11100000, B00011111,
    B00011000, B00000011, B00000000, B01100011,
    B00011000, B00000011, B00000000, B01100011,
    B00000000, B01100011, B00011000, B00000011,
    B00000000, B11100011, B00011100, B00000011,
    B00000000, B11100011, B00011100, B00000011,
    B00000011, B11100011, B00011111, B00000011,
    B00000111, B11100011, B00011111, B10000011,
    B00000111, B11100011, B00011111, B10000011,
    B11100000, B00011111, B11100000, B00011111,
    B11100000, B00011111, B11100000, B00011111,
    B11100000, B00011111, B11100000, B00011111,
    B00011111, B11111111, B11111111, B11100011,
    B00011111, B11111111, B11111111, B11100011,
    B11100000, B00011111, B11100000, B00011111,
    B11100000, B00011111, B11100000, B00011111,
    B11100000, B00011111, B11100000, B00011111,
    B00000111, B11100011, B00011111, B10000011,
    B00000111, B11100011, B00011111, B10000011,
    B00000011, B11100011, B00011111, B00000011,
    B00000000, B11100011, B00011100, B00000011,
    B00000000, B11100011, B00011100, B00000011,
    B00000000, B01100011, B00011000, B00000011,
    B00011000, B00000011, B00000000, B01100011,
    B00011000, B00000011, B00000000, B01100011,
    B11100000, B00011100, B11100000, B00011111,
    B11100000, B00011100, B11100000, B00011111,
    B11100000, B00011100, B11100000, B00011111};

const unsigned char cloud_bmp[] PROGMEM = {
    B00000000, B00011111, B11111000, B00000011,
    B00000000, B00011111, B11111000, B00000011,
    B00000000, B01111111, B11111111, B00000011,
    B00000000, B01110000, B00001111, B00000011,
    B00000011, B11110000, B00001111, B11000011,
    B00000011, B11110000, B00001111, B11000011,
    B00111111, B11110000, B00001111, B11110011,
    B00111110, B00000000, B00000000, B01110011,
    B00111110, B00000000, B00000000, B01110011,
    B11111110, B00000000, B00000000, B01110011,
    B11100000, B00000000, B00000000, B01110011,
    B11100000, B00000000, B00000000, B01111111,
    B11100000, B00000000, B00000000, B00011111,
    B11111111, B11111111, B11111111, B11111111,
    B00111111, B11111111, B11111111, B11111111,
    B00111111, B11111111, B11111111, B11111111};

const unsigned char rain_bmp[] PROGMEM = {
    B00000000, B00011111, B11111000, B00000011,
    B00000000, B00011111, B11111000, B00000011,
    B00000000, B01111111, B11111111, B00000011,
    B00000000, B01110000, B00001111, B00000011,
    B00000011, B11110000, B00001111, B11000011,
    B00000011, B11110000, B00001111, B11000011,
    B00111111, B11110000, B00001111, B11110011,
    B00111110, B00000000, B00000000, B01110011,
    B00111110, B00000000, B00000000, B01110011,
    B11111110, B00000000, B00000000, B01110011,
    B11100000, B00000000, B00000000, B01110011,
    B11100000, B00000000, B00000000, B01111111,
    B11100000, B00000000, B00000000, B00011111,
    B11111111, B11111111, B11111111, B11111111,
    B00111111, B11111111, B11111111, B11111111,
    B00111111, B11111111, B11111111, B11111111,
    B00000000, B01110000, B00001111, B00000011,
    B00000000, B01110000, B00001111, B00000011,
    B00000011, B11110111, B10111111, B00000011,
    B00000011, B11000111, B10111000, B00000011,
    B00001111, B11011111, B10111111, B00000011,
    B00001110, B00011100, B00001111, B00000011,
    B00001111, B11011100, B11101111, B00000011,
    B00000011, B11000000, B11100000, B00000011,
    B00000011, B11000000, B11100000, B00000011};

const unsigned char storm_bmp[] PROGMEM = {
    B00000000, B00011111, B11111000, B00000011,
    B00000000, B00011111, B11111000, B00000011,
    B00000000, B01111111, B11111111, B00000011,
    B00000000, B01110000, B00001111, B00000011,
    B00000011, B11110000, B00001111, B11000011,
    B00000011, B11110000, B00001111, B11000011,
    B00111111, B11110000, B00001111, B11110011,
    B00111110, B00000000, B00000000, B01110011,
    B00111110, B00000000, B00000000, B01110011,
    B11111110, B00000000, B00000000, B01110011,
    B11100000, B00000000, B00000000, B01110011,
    B11100000, B00000000, B00000000, B01111111,
    B11100000, B00000000, B00000000, B00011111,
    B11111111, B11111111, B11111111, B11111111,
    B00111111, B11111111, B11111111, B11111111,
    B00111111, B11111111, B11111111, B11111111,
    B00111111, B11111111, B11111111, B11111111,
    B00000000, B01110000, B00001111, B00000011,
    B00000000, B01111100, B00111111, B00000011,
    B00000000, B00011100, B00111000, B00000011,
    B00000000, B01111100, B11111000, B00000011,
    B00000000, B01110000, B11100000, B00000011,
    B00000000, B01110000, B11100000, B00000011,
    B00000000, B01111111, B11100000, B00000011,
    B00000000, B01111111, B10000000, B00000011,
    B00000000, B01111111, B10000000, B00000011,
    B00000000, B00011100, B00000000, B00000011,
    B00000000, B01111100, B00000000, B00000011,
    B00000000, B01110000, B00000000, B00000011,
    B00000000, B01110000, B00000000, B00000011};

const unsigned char sun_bmp[] PROGMEM = {
    B00000000, B00000111, B10000000, B00000011,
    B00000000, B00000111, B10000000, B00000011,
    B00111100, B00000111, B10000000, B11110011,
    B00111100, B00000000, B00000000, B11110011,
    B00111100, B00000000, B00000000, B11110011,
    B00111100, B11111111, B11111100, B11110011,
    B00000000, B11111111, B11111100, B00000011,
    B00000000, B11111111, B11111100, B00000011,
    B00000111, B11111111, B11111111, B10000011,
    B00000111, B11100000, B00011111, B10000011,
    B00000111, B11100000, B00011111, B10000011,
    B00000111, B10000000, B00000111, B10000011,
    B00000111, B10000000, B00000111, B10000011,
    B11100111, B10000000, B00000111, B10011111,
    B11100111, B10000000, B00000111, B10011111,
    B11100111, B10000000, B00000111, B10011111,
    B11100111, B10000000, B00000111, B10011111,
    B00000111, B10000000, B00000111, B10000011,
    B00000111, B10000000, B00000111, B10000011,
    B00000111, B11100000, B00011111, B10000011,
    B00000111, B11100000, B00011111, B10000011,
    B00000111, B11111111, B11111111, B10000011,
    B00000000, B11111111, B11111100, B00000011,
    B00000000, B11111111, B11111100, B00000011,
    B00111100, B11111111, B11111100, B11110011,
    B00111100, B00000000, B00000000, B11110011,
    B00111100, B00000000, B00000000, B11110011,
    B00111100, B00000111, B10000000, B11110011,
    B00000000, B00000111, B10000000, B00000011,
    B00000000, B00000111, B10000000, B00000011};

// WIFI Variables
const char *ssid = ""; // Change accordingly to connect to a WIFi network.
const char *password = "";

// Time Server Variables
String formattedDate;
String dayStamp;
String timeStamp;
const char *ntpServer = "pool.ntp.org";
long gmtOffset_sec = 0;
const int daylightOffset_sec = 0;

<<<<<<< HEAD
<<<<<<< HEAD
=======
// Location Variables
float lat, lon;

>>>>>>> 5c32671 (fix function constructors and dependencies)
=======
>>>>>>> 5f1ef29 (Integrate captive portal)
// Weather/Location Server Variables
StaticJsonDocument<1024> doc;
float coord_lon = doc["coord"]["lon"];
float coord_lat = doc["coord"]["lat"];
JsonObject weather_0;
int weather_0_id = weather_0["id"];
const char *weather_0_main = weather_0["main"];
const char *weather_0_description = weather_0["description"];
const char *weather_0_icon = weather_0["icon"];
const char *base = doc["base"];
JsonObject main1;
float main_temp = main1["temp"];
float main_feels_like = main1["feels_like"];
float main_temp_min = main1["temp_min"];
float main_temp_max = main1["temp_max"];
int main_pressure = main1["pressure"];
int main_humidity = main1["humidity"];
int main_sea_level = main1["sea_level"];
int main_grnd_level = main1["grnd_level"];
int visibility = doc["visibility"];
JsonObject wind;
float wind_speed = wind["speed"];
int wind_deg = wind["deg"];
float wind_gust = wind["gust"];
int clouds_all = doc["clouds"]["all"];
long dt = doc["dt"];
JsonObject sys;
int sys_type = sys["type"];
long sys_id = sys["id"];
const char *sys_country = sys["country"];
long sys_sunrise = sys["sunrise"];
long sys_sunset = sys["sunset"];
int timezone = doc["timezone"];
long id = doc["id"];
const char *city_name = doc["name"];
int cod = doc["cod"];

// Control Variables
int bucket_count = 0;
int current_liters = 100;
bool received_message = false;

// ESP Now Communication Variables
typedef struct struct_message
{
  char id[50];
  int type;
  float data1;
  float data2;
  float data3;
  float data4;
  float data6;
  float data7;
} struct_message;

struct_message myData;

typedef struct pairing_data
{
  char ssid[32];
  char mac_addr[18];
} pairing_data;

struct pairing_data pairingData;

// Timed Event Variables - used to send
long current_time, elapsed_time, sent_time;
bool sending_climate = true;
bool sending_activity = false;

// Water Management Variables
int buckets, tanks, quality, envs, avail_storage, avail_liters;
float fill_percentage;
const char *dev_name;

int activity;

float up = 27;
float down = 15;
float right = 13;
float left = 14;
float a = 2;
float b = 4;

unsigned long previousMillis = 0; // WiFi Reconnecting Variables
unsigned long interval = 5000;

int get_buttons()
{ // Funtion returns int from 1 - 6

  /*
     1 - Up
     2 - Down
     3 - Right
     4 - Left
     5 - A
     6 - B
  */

  int touch_delay = 300;
  display.clearDisplay();

  if (!digitalRead(up))
  {
    // delay(touch_delay);
    // Serial.println(up_cap);
    return 1;
    // display.clearDisplay();
  }

  else if (!digitalRead(down))
  {
    // delay(touch_delay);
    return 2;
    // display.clearDisplay();
  }

  else if (!digitalRead(right))
  {
    // delay(touch_delay);
    // display.clearDisplay();
    return 3;
  }

  else if (!digitalRead(left))
  {
    // delay(touch_delay);
    return 4;
    // display.clearDisplay();
  }

  else if (!digitalRead(a))
  {
    // delay(touch_delay);
    return 5;
    // display.clearDisplay();
  }
  else if (!digitalRead(b))
  {
    // delay(touch_delay);
    return 6;
    // display.clearDisplay();
  }
}

void get_time()
{ // Functiuons queries server to get current time. Activates time screen.

  // Init and get the time
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo))
  {
    Serial.println("Failed to obtain time");
    return;
  }

  // int num_month = month(timeinfo);
  // Serial.println(num_month);

  char buffer[80]; // Buffer to hold the formatted string. Adjust the size as needed.
  strftime(buffer, sizeof(buffer), "%Y-%m-%d %H:%M:%S", &timeinfo);
  formattedDate = String(buffer);
  // Serial.println(formattedDate);

  // Extract date
  int splitT = formattedDate.indexOf(" ");
  dayStamp = formattedDate.substring(0, splitT);
  Serial.print("DATE: ");
  // Serial.println(dayStamp);

  // Extract time
  timeStamp = formattedDate.substring(splitT + 1, formattedDate.length() - 3);
  Serial.print("HOUR: ");
  // Serial.println(timeStamp);
}

void drawCS()
{ // Draws CS Logo
  display.clearDisplay();
  display.drawBitmap(
      (display.width() - LOGO_WIDTH) / 2,
      (display.height() - LOGO_HEIGHT) / 2,
      cs_logo_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display();
  delay(1000);
}

void draw_axol()
{ // Draws Axol
  get_system_stats();

  display.clearDisplay();
  if (fill_percentage >= .5)
  {
    display.drawBitmap(
        (display.width() - 108) / 2,
        (display.height() - 60) / 2,
        happy_axol_bmp, 108, 60, 1);
    display.display();
  }
  else
  {
    display.drawBitmap(
        (display.width() - 125) / 2,
        (display.height() - 60) / 2,
        sad_axol_bmp, 125, 60, 1);
    display.display();
  }

  delay(5000);
  draw_maindash();
}

void draw_weather_icon(const unsigned char icon[], int width, int height)
{
  display.drawBitmap(
      (display.width() - width),
      (display.height() - height),
      icon, width, height, 1);
}

void draw_waterdash()
{ // Function Draws Dashboard with loction, weather and time information.

  get_system_stats();

  int16_t x1;
  int16_t y1;
  uint16_t width;
  uint16_t height;

  // Serial.println(remaining_average);
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.print("Reservas: ");
  display.print(fill_percentage * 100);
  display.println(" %");
  display.setTextSize(1);
  display.println("");
  display.print(avail_liters);
  display.print("/");
  display.print(avail_storage);
  display.println(" L ");
  display.println("Displonibles");

  // water quality dashboard!!!!!!!!!!!!!!!!!

  /*if (remaining_average >= water_goal) {
    draw_water_icon(happy_drop_bmp, WWIDTH, WHEIGHT);
  }
  if (remaining_average <= water_goal) {
    draw_water_icon(sad_drop_bmp, WWIDTH, WHEIGHT);
  } */
  display.display();

  delay(5000);
  draw_maindash();
}

void draw_system()
{
  int16_t x1;
  int16_t y1;
  uint16_t width;
  uint16_t height;
  // Serial.println(remaining_average);
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("Sensores");
  display.println("");
  display.setTextSize(1.5);
  display.print("Cubetas: ");
  display.println(buckets);
  display.print("Tanques: ");
  display.println(tanks);
  display.print("Calidad: ");
  display.println(quality);
  display.print("Ambiente: ");
  display.println(envs);

  display.display();

  delay(5000);
  draw_maindash();
}

void draw_receiveddata()
{

  display.clearDisplay();
  for (int16_t i = max(display.width(), display.height()) / 2; i > 0; i -= 3)
  {
    // The INVERSE color is used so circles alternate white/black
    display.fillCircle(display.width() / 2, display.height() / 2, i, SSD1306_INVERSE);
    display.display(); // Update screen with each newly-drawn circle
    delay(1);
  }

  draw_maindash();
}

void draw_maindash()
{ // Turn Screen Off
  display.clearDisplay();
  display.display();
}

void draw_clockdash()
{

  get_time();
  get_complete_weather();

  int16_t x1;
  int16_t y1;
  uint16_t width;
  uint16_t height;

  display.clearDisplay();
  display.setTextSize(2.5);
  display.setTextColor(WHITE);
  // Gents Center for Date
  display.getTextBounds(timeStamp, 0, 0, &x1, &y1, &width, &height);
  display.setCursor(0, 5);
  display.println(timeStamp);

  display.setTextSize(.9);
  display.getTextBounds(dayStamp, 0, 0, &x1, &y1, &width, &height);
  display.setCursor(0, 25);
  display.println(dayStamp);

  display.setTextSize(0);
  display.getTextBounds(city_name, 0, 0, &x1, &y1, &width, &height);
  display.setCursor(0, 55);
  display.println(city_name);

  int d_temp = round(main_temp - 272.15);
  int d_max = round(main_temp_max - 272.15);
  int d_min = round(main_temp_min - 272.15);

  display.setTextSize(2);
  String display_temp = String(d_temp) + "C";
  display.getTextBounds(display_temp, 0, 0, &x1, &y1, &width, &height);
  display.setCursor(SCREEN_WIDTH - width, 5);
  display.println(display_temp);

  display.setTextSize(.9);
  String display_range = String(d_min) + "C / " + String(d_max) + "C";
  display.getTextBounds(display_range, 0, 0, &x1, &y1, &width, &height);
  display.setCursor(SCREEN_WIDTH - width, 25);
  display.println(display_range);

  if ((String(weather_0_icon) == "04d") || (String(weather_0_icon) == "04n") || (String(weather_0_icon) == "03n") || (String(weather_0_icon) == "03d"))
  { // Clouds
    draw_weather_icon(cloud_bmp, 30, 16);
  }
  else if ((String(weather_0_icon) == "01d") || (String(weather_0_icon) == "01n") || (String(weather_0_icon) == "02n") || (String(weather_0_icon) == "02d"))
  { // Sun
    draw_weather_icon(sun_bmp, 30, 30);
  }
  else if ((String(weather_0_icon) == "09d") || (String(weather_0_icon) == "09n") || (String(weather_0_icon) == "10d") || (String(weather_0_icon) == "10n"))
  { // Rain
    draw_weather_icon(rain_bmp, 30, 25);
  }
  else if ((String(weather_0_icon) == "11d") || (String(weather_0_icon) == "11n"))
  { // Storm
    draw_weather_icon(storm_bmp, 30, 30);
  }
  else if ((String(weather_0_icon) == "13d") || (String(weather_0_icon) == "13n"))
  { // Snow
    draw_weather_icon(snow_bmp, 30, 30);
  }
  else
  { // Could be mist or other conditions.
  }

  display.display();
  delay(3500);

  draw_maindash();
}

void get_complete_weather()
{ // gets weather and location information.

  const String endpoint = "https://api.openweathermap.org/data/2.5/weather?lat=" + String(lat, 7) + "&lon=" + String(lon, 7) + "&appid=";
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
  const String key = "api key";
=======
  const String key = "{Your Open Weather API Key}";
>>>>>>> 5c32671 (fix function constructors and dependencies)
=======
  const String key = "{ENTER YOUR SECRET API KEY} ";
>>>>>>> 5f1ef29 (Integrate captive portal)
=======
  const String key = "api key";
>>>>>>> 9cd72c5 (Solving conflicts)

  HTTPClient http;

  http.begin(endpoint + key); // construct the URL
  Serial.println(endpoint + key);
  int httpCode = http.GET(); // send request

  if (httpCode > 0)
  { // If received weather JSON

    String payload = http.getString();
    Serial.println(payload);

    DeserializationError error = deserializeJson(doc, payload);

    if (error)
    {
      Serial.print("deserializeJson() failed: ");
      Serial.println(error.c_str());
      return;
    }

    coord_lon = doc["coord"]["lon"];
    coord_lat = doc["coord"]["lat"];

    weather_0 = doc["weather"][0];
    weather_0_id = weather_0["id"];
    weather_0_main = weather_0["main"];
    weather_0_description = weather_0["description"];
    weather_0_icon = weather_0["icon"];

    base = doc["base"];

    main1 = doc["main"];
    main_temp = main1["temp"];
    main_feels_like = main1["feels_like"];
    main_temp_min = main1["temp_min"];
    main_temp_max = main1["temp_max"];
    main_pressure = main1["pressure"];
    main_humidity = main1["humidity"];
    main_sea_level = main1["sea_level"];
    main_grnd_level = main1["grnd_level"];

    visibility = doc["visibility"];

    wind = doc["wind"];
    wind_speed = wind["speed"];
    wind_deg = wind["deg"];
    wind_gust = wind["gust"];

    clouds_all = doc["clouds"]["all"];

    dt = doc["dt"];

    sys = doc["sys"];
    sys_type = sys["type"];
    sys_id = sys["id"];
    sys_country = sys["country"];
    sys_sunrise = sys["sunrise"];
    sys_sunset = sys["sunset"];

    timezone = doc["timezone"];
    id = doc["id"]; // 6692163
    city_name = doc["name"];
    cod = doc["cod"];
  }

  else
  {
    Serial.println("Error fetching weather and location information. =( ");
  }

  http.end();
}

void OnDataRecv(const uint8_t *mac, const uint8_t *incomingData, int len)
{ // Fucntion is activated when ESP receives data on ESPNOW.
  // It copies the received message to memory and sets the received message variable to True to indicate that there is new data to be sent to the server.
  memcpy(&myData, incomingData, sizeof(myData));
  received_message = true;
  Serial.println("SE RECIBIO UN DATO NUEVO DE ALGUN SENSOR");
}

void server_send()
{ // Sends data to php script on server.
  // The function checks to see if the command is for the regular homehub climate updates or if the command is comming from a known connected sensor.
  // Case Switch function creates different php command depending on the type of sensor that the data corresponds to.

  String command;

  if (sending_climate)
  {
    get_time();
    get_complete_weather();
    command = {"type=0&id=" + WiFi.macAddress() + "&temp=" + main_temp + "&min_temp=" + main_temp_min +
               "&max_temp=" + main_temp_max + "&weather_main=" + weather_0_main + "&weather_description=" +
               weather_0_description + "&pressure=" + main_pressure + "&humidity=" + main_humidity +
               "&wind_speed=" + wind_speed + "&wind_direction=" + wind_deg + "&datetime=" + formattedDate};
    connect_send(command);
    sent_time = millis();
    sending_climate = false;
  }

  if (sending_activity)
  {

    get_time();
    command = "type=5&id=" + WiFi.macAddress() + "&activity=" + activity + "&datetime=" + formattedDate;
    Serial.println(command);
    connect_send(command);
  }
  else
  {

    switch (myData.type)
    {

    case 1:
    { // Bucket Sensor
      get_time();
      String send_id = myData.id;
      command = "type=1&id=" + send_id + "&datetime=" + formattedDate;
      Serial.println(command);
      connect_send(command);
    }
    break;

    case 2: // Tank Sensor
    {
      get_time();
      String send_id = myData.id;
      command = "type=2&id=" + send_id + "&water_distance=" + myData.data1 + "&datetime=" + formattedDate;
      Serial.println(command);
      connect_send(command);
    }
    break;

    case 3: // Temp Humidity Sensor
    {
      get_time();
      String send_id = myData.id;
      command = "type=3&id=" + send_id + "&temp=" + myData.data1 + "&humidity=" + myData.data2 + "&datetime=" + formattedDate;
      Serial.println(command);
      connect_send(command);
    }

    case 4: // Water Quality Sensor
    {
      get_time();
      String send_id = myData.id;
      command = "type=4&id=" + send_id + "&tds=" + myData.data1 + "&water_temp=" + myData.data2 + "&datetime=" + formattedDate;
      Serial.println(command);
      connect_send(command);
    }
    break;
    }
  }
}

void connect_send(String php_command)
{ // Send Data to PHP server
  // Function takes command as argument and sends a POST request to server.

  HTTPClient http;
  WiFiClient client;

  String server_main = "http://blindspot.media.mit.edu/homehub.php";

  http.begin(client, server_main);

  http.addHeader("Content-Type", "application/x-www-form-urlencoded");
  String httpRequestData = php_command;

  int httpResponseCode = http.POST(httpRequestData);

  if (httpResponseCode > 0)
  {
    Serial.print("HTTP Response code: ");
    Serial.println(httpResponseCode);
    String payload = http.getString();
    Serial.println(payload);
  }
  else
  {
    Serial.print("Error code: ");
    Serial.println(httpResponseCode);
  }
  // Free resources
  http.end();
}

void get_system_stats()
{ // Send Data to PHP server
  // Function takes command as argument and sends a POST request to server.

  HTTPClient http;

  String server_main = "http://blindspot.media.mit.edu/homehubweb/hhdash.php?id=" + WiFi.macAddress();

  http.begin(server_main); // construct the URL
  Serial.println(server_main);
  int httpCode = http.GET(); // send request

  if (httpCode > 0)
  { // If received weather JSON

    String payload = http.getString();
    Serial.println(payload);

    DeserializationError error = deserializeJson(doc, payload);

    if (error)
    {
      Serial.print("deserializeJson() failed: ");
      Serial.println(error.c_str());
      return;
    }

    fill_percentage = doc["percentage"];
    buckets = doc["bucketNum"];
    tanks = doc["tankNum"];
    avail_storage = doc["availStorage"];
    avail_liters = doc["availLiters"];
    quality = doc["qualityNum"];
    envs = doc["envNum"];
    dev_name = doc["name"];
    lat = doc["lat"];
    lon = doc["lon"];

    // Free resources
    http.end();
  }
  else
  {
    Serial.print("Error code: ");
    Serial.println(httpCode);
  }
}

void connect_to_saved_wifi_network()
{
<<<<<<< HEAD
  // Begin
  Serial.begin(115200);
  Serial.println("Hello, I'm the Pairinng Home Hub!");
  
<<<<<<< HEAD

  if (!establishWiFiConnection())
  {
    Serial.println("Couldn't connect to the network");
  }
  else
  {
    Serial.println("Connected!");
    printNetworkInfo();
  }

  // webserver for captive portal!!
  wm.setWebServerCallback(bindServerCallback);
=======
  Serial.println("Hello, I'm the CS Home Hub!");
>>>>>>> 5c32671 (fix function constructors and dependencies)
=======
>>>>>>> 9cd72c5 (Solving conflicts)

=======
>>>>>>> 2df143f (Pairing data struct for initial broadcast configuration)
  if (!establishWiFiConnection())
  {
    Serial.println("Couldn't connect to the network");
  }
  else
  {
    Serial.println("Connected!");
    printNetworkInfo();
  }
}

void setup()
{
  // Begin
  Serial.begin(115200);
  Serial.println("Hello, I'm the Pairing Home Hub!");
  pinMode(up, INPUT_PULLUP);
  pinMode(down, INPUT_PULLUP);
  pinMode(right, INPUT_PULLUP);
  pinMode(left, INPUT_PULLUP);
  pinMode(a, INPUT_PULLUP);
  pinMode(b, INPUT_PULLUP);
  char saved_ssid[32];

  /* SETTING UP SENSOR PAIRING  */

  // Connecting to saved wifi network to get ssid
  connect_to_saved_wifi_network();
  strcpy(saved_ssid, WiFi.SSID().c_str());

  Serial.print("Saved SSID: ");
  Serial.println(saved_ssid);

  // Disconnecting in order to establish communication between sensors without router intervention
  WiFi.disconnect();
  Serial.print("WiFi SSID after disconnecting: ");
  Serial.println(WiFi.SSID());

  WiFi.mode(WIFI_STA);

  Serial.println("Starting ESP NOW Communication");
  if (esp_now_init() != ESP_OK)
  {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Setting wifi channel
  const int channel = 13;
  WiFi.channel(channel);

  // ESP-NOW Broadcast MAC Address
  uint8_t broadcastAddress[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

  // Formatting MAC Address to XX:XX:XX:XX:XX:XX
  strcpy(pairingData.ssid, saved_ssid);
  snprintf(pairingData.mac_addr, sizeof(pairingData.mac_addr), "%02X:%02X:%02X:%02X:%02X:%02X",
           WiFi.macAddress()[0], WiFi.macAddress()[1], WiFi.macAddress()[2],
           WiFi.macAddress()[3], WiFi.macAddress()[4], WiFi.macAddress()[5]);

  // Sending pairing data struct
  esp_err_t result = esp_now_send(broadcastAddress, (const uint8_t *)&pairingData, sizeof(pairingData));

  if (result == ESP_OK)
  {
    Serial.println("Pairing data struct status: sent");
  }
  else
  {
    Serial.println("Pairing data struct status: failed");
  }

  // Continue with programmed tasks...

  // webserver for captive portal!!
  wm.setWebServerCallback(bindServerCallback);

  // Start-up OLED Screen
  Serial.println("Initializing Screen");
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C))
  {
    Serial.println(F("SSD1306 allocation failed"));
    // for (;;); // Don't proceed, loop forever
  }
  // Clear screen buffer
  display.clearDisplay();

  // CS Logo Animation
  drawCS(); // Draw's City Science Logo
  display.invertDisplay(true);
  delay(3000);
  display.invertDisplay(false);
  delay(3000);
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 10);

  // Display Welcome Text
  display.println("Inicializando HomeHub"); //"Welcome to Home  Hub"
  display.display();
  delay(2000);

  WiFi.mode(WIFI_AP_STA); // Optional
  // WiFi.mode(WIFI_STA);
  display.clearDisplay();
  display.print("Conectando a:"); //"Connecting to Wifi"
<<<<<<< HEAD
=======
  display.print("Conectando a WiFi"); //"Connecting to Wifi"
>>>>>>> 5c32671 (fix function constructors and dependencies)
=======
>>>>>>> 9cd72c5 (Solving conflicts)
  Serial.print("Connecting to WiFi");
  display.display();
  delay(2000);

  WiFi.begin(ssid, password);

  connect_to_saved_wifi_network();

  // while (WiFi.status() != WL_CONNECTED)
  // { // Check wi-fi is connected to wi-fi network
  //   delay(1000);
  //   Serial.print(".");
  //   display.print(".");
  //   display.display();
  // }

  display.clearDisplay();
<<<<<<< HEAD
<<<<<<< HEAD
=======
  display.println(" ");
>>>>>>> 5c32671 (fix function constructors and dependencies)
=======
>>>>>>> 9cd72c5 (Solving conflicts)
  display.print("Conectado a: "); //"Connected to: "
  display.println(ssid);
  display.print("Mi IP "); //"My IP Address is "
  display.println(WiFi.localIP());
  display.println(WiFi.macAddress());
  display.display();
  Serial.println("");
  Serial.println("WiFi connected successfully");
  Serial.print("Got IP: ");
  Serial.println(WiFi.localIP()); // Show ESP32 IP on serial
  Serial.print("Mi MAC Address: ");
  Serial.println(WiFi.macAddress());
  Serial.print("Wi-Fi Channel: ");
  Serial.println(WiFi.channel());

  // Serial.println("Starting ESP NOW Communication");
  // if (esp_now_init() != ESP_OK)
  // {
  //   Serial.println("Error initializing ESP-NOW");
  //   return;
  // }

  esp_now_register_recv_cb(OnDataRecv);

  // Get weather and location.
  Serial.println("Getting Weather and Location");
  get_system_stats();
  String greeting = dev_name;
  get_complete_weather();

  // Initialize time server
  Serial.println("Initializing Time Server");
  gmtOffset_sec = timezone; // +-3600 per hour difference against GMT.
  Serial.println("Time client started");

  sending_climate = true;
  server_send();
  Serial.println(greeting);
  display.clearDisplay();
  display.setCursor(0, 4);
  display.setTextSize(2);
  display.println(greeting);
<<<<<<< HEAD
=======
  display.println("Hola");
  display.println(greeting + "!");
>>>>>>> 5c32671 (fix function constructors and dependencies)
=======
>>>>>>> 9cd72c5 (Solving conflicts)
  display.display();

  delay(3000);
  draw_maindash();

  display.print("Hello, I'm the Pairinng Home Hub 2.0!");
<<<<<<< HEAD
=======
>>>>>>> 5c32671 (fix function constructors and dependencies)
=======
>>>>>>> 9cd72c5 (Solving conflicts)
  Serial.println("Setup is complete!");

}

// GPIO27 -> Up
// GPIO15 -> Down
// GPIO13 -> Right
// GPIO14 -> Left
// GPIO4 -> B
// GPIO2 -> A

void loop()
{
    current_time = millis();
    elapsed_time = current_time - sent_time;
    if (elapsed_time >= 28800000)
    { // Updates and Sends Climate Data every 8 hours
      sending_climate = true;
      server_send();
      Serial.println("Sent Climate Data To Server");
    }

    if ((WiFi.status() != WL_CONNECTED) && (current_time - previousMillis >= interval))
    {
      Serial.println("Reconnecting to WiFi!");
      WiFi.disconnect();
      WiFi.reconnect();
      previousMillis = current_time;
    }

    if (received_message)
    {
      draw_receiveddata();
      server_send();
      received_message = false;
    }
    if (get_buttons() == 1)
    { // Shows Clock Screen When Up Arrow is Pressed
      Serial.print("Presionaste: ");
      Serial.println(get_buttons());
      Serial.println("Borrando credenciales de Wi-Fi...");
      wm.resetSettings(); // Borra las credenciales de Wi-Fi
      ESP.restart();      // Reinicia el ESP32
      sending_activity = true;
      activity = 1;
      draw_clockdash();
      server_send();
      sending_activity = false;
    }
    if (get_buttons() == 2)
    { // Shows Water Dashboard
      Serial.print("Presionaste: ");
      Serial.println(get_buttons());
      sending_activity = true;
      activity = 2;
      draw_waterdash();
      server_send();
      sending_activity = false;
    }
    if (get_buttons() == 3)
    { // Shows Virtual Axol
      Serial.print("Presionaste: ");
      Serial.println(get_buttons());
      sending_activity = true;
      activity = 3;
      draw_axol();
      server_send();
      sending_activity = false;
    }
    if (get_buttons() == 4)
    { // Clear Display
      Serial.print("Presionaste: ");
      Serial.println(get_buttons());
      sending_activity = true;
      activity = 4;
      draw_system();
      server_send();
      sending_activity = false;
    }
    if (get_buttons() == 5)
    { // Clear Display
      Serial.print("Presionaste: ");
      Serial.println(get_buttons());
      Serial.println("Abriendo portal en demanda");
      onDemandPortal();

<<<<<<< HEAD
  if (received_message)
  {
    draw_receiveddata();
    server_send();
    received_message = false;
  }
  if (get_buttons() == 1)
  { // Shows Clock Screen When Up Arrow is Pressed
<<<<<<< HEAD
<<<<<<< HEAD
    Serial.print("Presionaste: ");
    Serial.println(get_buttons());
    Serial.println("Borrando credenciales de Wi-Fi...");
    wm.resetSettings(); // Borra las credenciales de Wi-Fi
    ESP.restart();      // Reinicia el ESP32
<<<<<<< HEAD
=======
>>>>>>> 5c32671 (fix function constructors and dependencies)
=======
    Serial.print("Presionaste: ");
    Serial.println(get_buttons());
>>>>>>> 5f1ef29 (Integrate captive portal)
=======
>>>>>>> 9cd72c5 (Solving conflicts)
    sending_activity = true;
    activity = 1;
    draw_clockdash();
    server_send();
    sending_activity = false;
<<<<<<< HEAD
<<<<<<< HEAD

=======
>>>>>>> 9cd72c5 (Solving conflicts)
  }
  if (get_buttons() == 2)
  { // Shows Water Dashboard
    Serial.print("Presionaste: ");
    Serial.println(get_buttons());
<<<<<<< HEAD
=======
  }
  if (get_buttons() == 2)
  { // Shows Water Dashboard
>>>>>>> 5c32671 (fix function constructors and dependencies)
=======
>>>>>>> 5f1ef29 (Integrate captive portal)
    sending_activity = true;
    activity = 2;
    draw_waterdash();
    server_send();
    sending_activity = false;
  }
  if (get_buttons() == 3)
  { // Shows Virtual Axol
<<<<<<< HEAD
<<<<<<< HEAD
    Serial.print("Presionaste: ");
    Serial.println(get_buttons());
=======
>>>>>>> 5c32671 (fix function constructors and dependencies)
=======
    Serial.print("Presionaste: ");
    Serial.println(get_buttons());
>>>>>>> 5f1ef29 (Integrate captive portal)
    sending_activity = true;
    activity = 3;
    draw_axol();
    server_send();
    sending_activity = false;
  }
  if (get_buttons() == 4)
  { // Clear Display
<<<<<<< HEAD
<<<<<<< HEAD
    Serial.print("Presionaste: ");
    Serial.println(get_buttons());
=======
>>>>>>> 5c32671 (fix function constructors and dependencies)
=======
    Serial.print("Presionaste: ");
    Serial.println(get_buttons());
>>>>>>> 5f1ef29 (Integrate captive portal)
    sending_activity = true;
    activity = 4;
    draw_system();
    server_send();
    sending_activity = false;
  }
  if (get_buttons() == 5)
  { // Clear Display
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 5f1ef29 (Integrate captive portal)
    Serial.print("Presionaste: ");
    Serial.println(get_buttons());
    Serial.println("Abriendo portal en demanda");
    onDemandPortal();

    // sending_activity = true;
    // activity = 5;
    // display.clearDisplay();
    // server_send();
    // sending_activity = false;
<<<<<<< HEAD
<<<<<<< HEAD
  }
=======
      // sending_activity = true;
      // activity = 5;
      // display.clearDisplay();
      // server_send();
      // sending_activity = false;
    }
>>>>>>> 2df143f (Pairing data struct for initial broadcast configuration)
}
=======
    sending_activity = true;
    activity = 5;
    display.clearDisplay();
    server_send();
    sending_activity = false;
=======
>>>>>>> 5f1ef29 (Integrate captive portal)
  }
}
>>>>>>> 5c32671 (fix function constructors and dependencies)
=======
  }
}
>>>>>>> 9cd72c5 (Solving conflicts)
